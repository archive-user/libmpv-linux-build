name: Build MPV

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
      github_release:
        description: 'Upload to Github release'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        sudo apt update
        sudo apt install -y gcc g++ autoconf automake debhelper glslang-dev ladspa-sdk xutils-dev libasound2-dev \
            libarchive-dev libbluray-dev libbs2b-dev libcaca-dev libcdio-paranoia-dev libdrm-dev \
            libdav1d-dev libdvdnav-dev libegl1-mesa-dev libepoxy-dev libfontconfig-dev libfreetype6-dev \
            libfribidi-dev libgl1-mesa-dev libgbm-dev libgme-dev libgsm1-dev libharfbuzz-dev libjpeg-dev \
            libbrotli-dev liblcms2-dev liblircclient-dev libmodplug-dev libmp3lame-dev libopenal-dev \
            libopus-dev libopencore-amrnb-dev libopencore-amrwb-dev libpulse-dev librtmp-dev \
            libsdl2-dev libsixel-dev libssh-dev libsoxr-dev libspeex-dev libtool \
            libv4l-dev libva-dev libvdpau-dev libvorbis-dev libvo-amrwbenc-dev \
            libunwind-dev libvpx-dev libwayland-dev libx11-dev libxext-dev \
            libxkbcommon-dev libxrandr-dev libxss-dev libxv-dev libxvidcore-dev \
            linux-libc-dev nasm ninja-build pkg-config python3 python3-docutils wayland-protocols \
            x11proto-core-dev zlib1g-dev libfdk-aac-dev libtheora-dev libwebp-dev \
            unixodbc-dev libpq-dev libxxhash-dev libaom-dev
        pip3 install meson

    - name: Install Vulkan
      run: |
        VULKAN_VERSION=1.3.296.0
        VULKAN_SDK_URL=https://sdk.lunarg.com/sdk/download/${VULKAN_VERSION}/linux/vulkan-sdk-${VULKAN_VERSION}.tar.xz?Human=true
        VULKAN_SDK_PATH=/tmp/vulkan-sdk

        rm -rf ${VULKAN_SDK_PATH}

        mkdir -p ${VULKAN_SDK_PATH}
        wget -O vulkan-sdk.tar.xz "${VULKAN_SDK_URL}"
        tar -xf vulkan-sdk.tar.xz -C ${VULKAN_SDK_PATH} --strip-components=1
        rm -f vulkan-sdk.tar.xz

        source ${VULKAN_SDK_PATH}/setup-env.sh

    - name: Build MPV
      run: |
        PATCH_DIR="${GITHUB_WORKSPACE}/patch"
        if [ ! -d "$PATCH_DIR" ]; then
          echo "Patch directory not found: $PATCH_DIR"
          exit 1
        fi

        MPV_BUILD_PATH=/tmp/mpv_build
        rm -rf ${MPV_BUILD_PATH}
        mkdir -p ${MPV_BUILD_PATH}
        cp -r ${GITHUB_WORKSPACE}/external/* ${MPV_BUILD_PATH}
        sudo chmod -R 777 ${MPV_BUILD_PATH}
        cd ${MPV_BUILD_PATH}

        > ffmpeg_options
        printf "%s\n" --enable-small >> ffmpeg_options
        printf "%s\n" --enable-libass >> ffmpeg_options

        printf "%s\n" --disable-bzlib >> ffmpeg_options
        printf "%s\n" --disable-outdevs >> ffmpeg_options
        printf "%s\n" --disable-filters >> ffmpeg_options
        printf "%s\n" --disable-muxers >> ffmpeg_options
        printf "%s\n" --disable-encoders >> ffmpeg_options
        printf "%s\n" --disable-decoders >> ffmpeg_options
        printf "%s\n" --disable-demuxers >> ffmpeg_options
        printf "%s\n" --disable-protocols >> ffmpeg_options

        printf "%s\n" "--enable-decoder=*sub*,movtext,*web*,aac*,ac3*,eac3*,alac*,ape,ass,av1*,ccaption,cfhd,cook,dca,dnxhd,exr,truehd,*yuv*,flv,flac,gif,h26[3-4]*,hevc*,hap,mp[1-3]*,prores,*[mj]peg*,mlp,mpl2,nellymoser,opus,pcm*,qtrle,*png*,tiff,rawvideo,rv*,sami,srt,ssa,v210*,vc1*,vorbis,vp[6-9]*,wm*,wrapped_avframe" >> ffmpeg_options
        printf "%s\n" "--enable-demuxer=*sub*,*ac3,*ac,*avs*,*[mj]peg*,*vc*,*web*,au,ape,ass,av[1i],concat,dnxhd,dts*,*dash*,*flv,gif,hls,h264,kux,matroska,mov,mp3,mxf,obu,ogg,pcm*,rawvideo,rt*p,spdif,srt,v210*,wav,*pipe,image2" >> ffmpeg_options
        printf "%s\n" "--enable-encoder=*_at,aac,gif,h26[3-4]*,av1*,hevc*,mjpeg*,*png,opus,pcm*,prores*,rawvideo,spdif,speedhq,*jpeg,*png,vp[8-9]*,wrapped_avframe" >> ffmpeg_options
        printf "%s\n" "--enable-muxer=*jpeg,fifo,flv,gif,hls,h264,hevc,image2,mov,mp4,mpegts,matroska,null,pcm*,rawvideo,rt*,spdif,*pipe,*segment,webm,wav" >> ffmpeg_options
        printf "%s\n" "--enable-protocol=cache,concat*,crypto*,data,fd,*file,ftp,h*,i*,pipe,rt*,s*,t*,u*" >> ffmpeg_options
        printf "%s\n" "--enable-filter=*null*,afade,*fifo,*format,*resample,aeval,atempo,pan,crop,eq*,framerate,hw*,loudnorm,scale,volume,yadif*" >> ffmpeg_options

        > mpv_options
        printf "%s\n" -Dlibmpv=true >> mpv_options
        printf "%s\n" -Duchardet=enabled >> mpv_options
        printf "%s\n" -Dsndio=enabled >> mpv_options
        printf "%s\n" -Dcaca=disabled >> mpv_options
        printf "%s\n" -Djpeg=disabled >> mpv_options
        printf "%s\n" -Dlibbluray=disabled >> mpv_options
        printf "%s\n" -Dsixel=disabled >> mpv_options

        echo "build options added"
        
        ./use-sndio-master
        ./use-bzip2-master
        ./use-libxpresent-master
        ./use-uchardet-master
        ./use-rubberband-master
        ./use-ffmpeg-master
        ./use-libass-master
        ./use-libplacebo-master
        ./use-mpv-release

        echo "updating submodules"

        ./update

        echo "applying patches to ffmpeg"
        
        ls -l
        cd ffmpeg
        for PATCH_FILE in $PATCH_DIR/*.patch; do
          if [ -f "$PATCH_FILE" ]; then
            echo "Applying patch: $PATCH_FILE"
            git apply "$PATCH_FILE"
          else
            echo "No patch files found in $PATCH_DIR"
            exit 1
          fi
        done
        cd ../

        ./clean
        ./build -j$(nproc)

        mkdir -p $GITHUB_WORKSPACE/artifacts
        cp -r mpv/build/* $GITHUB_WORKSPACE/artifacts

        cd mpv/build/
        zip libmpv_x86_64.zip libmpv.so.2
        cp -r libmpv_x86_64.zip ${GITHUB_WORKSPACE}
        cd ${GITHUB_WORKSPACE}/include/
        zip -r libmpv_x86_64_header.zip mpv
        cp -r libmpv_x86_64_header.zip ${GITHUB_WORKSPACE}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mpv-binary
        path: artifacts

    - name: Uploading packages to Github release
      uses: softprops/action-gh-release@v1
      if: ${{ github.event.inputs.github_release == 'true'}}
      with:
        draft: true
        prerelease: false
        tag_name: "vnext"
        files: |
          libmpv_x86_64.zip
          libmpv_x86_64_header.zip